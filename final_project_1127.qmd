---
title: "Studying Caregivers of Persons with Dementia"
subtitle: "BMIN503/EPID600 Final Project"
author: "Hannah Cho"
format: html
editor: visual
number-sections: true
embed-resources: true
---

------------------------------------------------------------------------

*Updated 11/27/24*

## *Overview* {#sec-overview}

*Give a brief a description of your project and its goal(s), what data you are using to complete it, and what two faculty/staff in different fields you have spoken to about your project with a brief summary of what you learned from each person. Include a link to your final project GitHub repository.*

## *Introduction* {#sec-introduction}

*The challenges faced by dementia caregivers are deeply complex and multifaceted, encompassing not only the physical and emotional demands of caregiving but also social physical, and systemic barriers. These challenges are not apply physically demanding- such as providing around-the-clock care, assisting with activities of daily living, and managing the various health complications of dementia- but they also take a significant burden on the caregivers' emotional well-being. Caregivers often experience stress, anxiety, depression, and a sense of isolation, as the demands of caregiving can leave little room for self-care, personal, or social engagement. Among them, caregivers for persons with dementia are put at high risks of anxiety and depression due to the nature of the diseases. The trajectory of dementia is not quietly common and varied based on individuals' pre-exisitng problems and multicomorbidities. In addition to this uncertaintity, caregivers often face sigificant social and systemic barriers that limit their access to essential support services. These barriers include financial strain, a lack of accessible respite care, insufficient knowledge about available resources, and cultural or social stigma associated with caregiving. Many caregivers also experience isolation due to lack of social engagement.*

*Research Question: Which social strains and sociodemographic characteristics of caregivers most strongly predict anxiety and depression for caregiver of persons with living dementia, and how accurately can supervised machine learning models predict these outcomes?*

## *Methods* {#sec-methods}

***Dataset**: This study uses data from the National Health and Aging Trends Study (NHATS) Round 11 and the National Study of Caregiving (NSOC) Round 4, which include data collected in 2021. The NHATS is a publicly accessible dataset that includes a nationally representatative sample of adults aged 65 years old and older who are Medicare beneficiaries in the United States of America. The NSOC is conducted alongside the NHATS; participants in the NSOC are caregivers for older adults included in the NHATS. Both the NHATS and the NSOC were funded by the National Institute on Aging (R01AG062477; U01AG032947). When used together, the NHATS and NSOC provide valuable information on dyads of older adults receiving care and their family caregivers.*

***Samples**: Persons with dementia: Probable dementia was identified based on one of the following criteria: a self-reported diagnosis of dementia or Alzheimer’s disease by a physician, a score of 2 or higher on the AD8 screening instrument administered to proxy respondents, or a score that is 1.5 standard deviations below the mean on a range of cognitive tests.Caregivers: Caregivers are identified from the NSOC and NHATS data set. Since this project specifically aims to explore caregivers of persons with dementia in the community, the sample was further filtered through dementia classification (demclass) and residency (r11dresid).*

*Afer retriving NHATS Round 11 and NSOC ROUND 4, I specifically selected the sample (from NHATS R11- r11demclas). And then, I merged those necessary datasets.*

*Install necessary packages first.*

```{r}
#Install necessary packages first.
library(haven) #for dta file
library(dplyr) 
library(ggplot2) #for data visualization 
#Bring datasets 
df1 <- read_dta("~/R  HC/BMIN503_Final_Project/final final/NHATS_Round_11_SP_File_V2.dta") # dementia classfication in this file
df2 <- read_dta("~/R  HC/BMIN503_Final_Project/final final/NSOC_r11.dta") #caregiver information 1
df3 <- read_dta("~/R  HC/BMIN503_Final_Project/final final/NSOC_cross.dta") #caregiver information 2
df4 <- read_dta("~/R  HC/BMIN503_Final_Project/final final/NHATS_Round_11_OP_File.dta") #older adults information 
```

```{r}
#need to clean df1 first in order to classify dementia classes  
#ENTER WHICH ROUND?
sp1 <- df1 |>
  mutate(rnd = 11) 

#3. EDIT ROUND NUMBER INSIDE THE QUOTES 
#(THIS REMOVES THE PREFIXES ON NEEDED VARIABLES ) 
sp1 <- sp1 |>
  rename_all(~stringr::str_replace(.,"^r11","")) |>
  rename_all(~stringr::str_replace(.,"^hc11","")) |>
  rename_all(~stringr::str_replace(.,"^is11","")) |>
  rename_all(~stringr::str_replace(.,"^cp11","")) |> 
  rename_all(~stringr::str_replace(.,"^cg11",""))

#ADD R1DAD8DEM AND SET TO -1 FOR ROUND 1 BECAUSE THERE IS NO PRIOR DIAGNOSIS IN R1
sp1 <- sp1 %>% 
  mutate(dad8dem = ifelse(rnd == 1, -1, dad8dem))


#ADD R1DAD8DEM AND SET TO -1 FOR ROUND 1 BECAUSE THERE IS NO PRIOR DIAGNOSIS IN R1
sp1 <- sp1 %>% 
  mutate(dad8dem = ifelse(rnd == 1, -1, dad8dem))

#SUBSET NEEDED VARIABLES
df<-sp1 %>% 
  dplyr::select(spid, rnd, dresid, resptype, disescn9, chgthink1, chgthink2, chgthink3, chgthink4, chgthink5, chgthink6, chgthink7, chgthink8, dad8dem,
                speaktosp, todaydat1, todaydat2, todaydat3, todaydat4, todaydat5, presidna1, presidna3, vpname1, vpname3, quesremem, dclkdraw, atdrwclck, 
                dwrdimmrc, dwrdlstnm, dwrddlyrc)

#FIX A ROUND 2 CODING ERROR#
df <- df %>%
  mutate(dwrdimmrc = ifelse(dwrdimmrc==10 & dwrddlyrc==-3 & rnd==2, -3, dwrdimmrc))

#CREATE SELECTED ROUND DEMENTIA CLASSIFICATION VARIABLE 
df <- df %>%
  mutate(demclas  =  ifelse(dresid==3 | dresid==5 | dresid==7, -9, #SET MISSING (RESIDENTIAL CARE FQ ONLY) AND N.A. (NURSING HOME RESIDENTS, DECEASED)
                            ifelse((dresid==4 & rnd==1) | dresid==6 | dresid==8, -1,                #SET MISSING (RESIDENTIAL CARE FQ ONLY) AND N.A. (NURSING HOME RESIDENTS, DECEASED)
                                   ifelse((disescn9==1 | disescn9==7) &           #CODE PROBABLE IF DEMENTIA DIAGNOSIS REPORTED BY SELF OR PROXY*
                                            (resptype==1 | resptype==2), 1, NA))))

#CODE AD8_SCORE*
#INITIALIZE COUNTS TO NOT APPLICABLE*
#ASSIGN VALUES TO AD8 ITEMS IF PROXY AND DEMENTIA CLASS NOT ALREADY ASSIGNED BY REPORTED DIAGNOSIS 
for(i in 1:8){
  df[[paste("ad8_", i, sep = "")]]  <- as.numeric(ifelse(df[[paste("chgthink", i, sep = "")]]==2 & df$resptype==2 & is.na(df$demclas), 0, #PROXY REPORTS NO CHANGE
                                                         ifelse((df[[paste("chgthink", i, sep = "")]]==1 | df[[paste("chgthink", i, sep = "")]] == 3) & df$resptype==2 & is.na(df$demclas), 1, #PROXY REPORTS A CHANGE OR ALZ/DEMENTIA*
                                                                ifelse(df$resptype==2 & is.na(df$demclas), NA, -1))))    #SET TO NA IF IN RES CARE AND demclass=., OTHERWISE AD8 ITEM IS SET TO NOT APPLICABLE                                                                                                                        
}

#INITIALIZE COUNTS TO NOT APPLICABLE*
for(i in 1:8){
  df[[paste("ad8miss_", i, sep = "")]]  <- as.numeric(ifelse(is.na(df[[paste("ad8_", i, sep = "")]]), 1,
                                                             ifelse((df[[paste("ad8_", i, sep = "")]]==0 | df[[paste("ad8_", i, sep = "")]]==1) & df$resptype==2 & is.na(df$demclas), 0, -1)))
}

for(i in 1:8){
  df[[paste("ad8_", i, sep = "")]] <- as.numeric(ifelse(is.na(df[[paste("ad8_", i, sep = "")]]) & is.na(df$demclas) & df$resptype==2, 0, df[[paste("ad8_", i, sep = "")]]))
}

#COUNT AD8 ITEMS
#ROUNDS 2+
df <- df %>%
  mutate(ad8_score = ifelse(resptype==2 & is.na(demclas), (ad8_1 + ad8_2 + ad8_3 + ad8_4 + ad8_5 + ad8_6 + ad8_7 + ad8_8), -1)) %>% 
  #SET PREVIOUS ROUND DEMENTIA DIAGNOSIS BASED ON AD8 TO AD8_SCORE=8 
  mutate(ad8_score = ifelse(dad8dem==1 & resptype==2 & is.na(demclas), 8, ad8_score))  %>% 
  #SET PREVIOUS ROUND DEMENTIA DIAGNOSIS BASED ON AD8 TO AD8_SCORE=8 FOR ROUNDS 4-9
  mutate(ad8_score = ifelse(resptype==2 & dad8dem==-1 & chgthink1==-1 & (rnd>=4 & rnd<=9) & is.na(demclas) , 8, ad8_score)) 

#COUNT MISSING AD8 ITEMS
df <- df %>% 
  mutate(ad8_miss = ifelse(resptype==2 & is.na(demclas),(ad8miss_1+ad8miss_2+ad8miss_3+ad8miss_4+ad8miss_5+ad8miss_6+ad8miss_7+ad8miss_8), -1))

#CODE AD8 DEMENTIA CLASS 
#IF SCORE>=2 THEN MEETS AD8 CRITERIA
#IF SCORE IS 0 OR 1 THEN DOES NOT MEET AD8 CRITERIA
df <- df %>% 
  mutate(ad8_dem = ifelse(ad8_score>=2, 1,
                          ifelse(ad8_score==0 | ad8_score==1 | ad8_miss==8, 2, NA)))

#UPDATE DEMENTIA CLASSIFICATION VARIABLE WITH AD8 CLASS
df <- df %>% 
  #PROBABLE DEMENTIA BASED ON AD8 SCORE  
  mutate(demclas = ifelse(ad8_dem==1 & is.na(demclas), 1, 
                          #NO DIAGNOSIS, DOES NOT MEET AD8 CRITERION, AND PROXY SAYS CANNOT ASK SP COGNITIVE ITEMS*
                          ifelse(ad8_dem==2 & speaktosp==2 & is.na(demclas), 3, demclas)))


####CODE DATE ITEMS AND COUNT 
#CODE ONLY YES/NO RESPONSES: MISSING/NA CODES -1, -9 LEFT MISSING*
#2: NO/DK OR -7: REFUSED RECODED TO : NO/DK/RF*
#****ADD NOTES HERE ABOUT WHAT IS HAPPENING IN ROUNDS 1-3, 5+ VS. ROUND 4 
#*
for(i in 1:5){
  df[[paste("date_item", i, sep = "")]]  <- as.numeric(ifelse(df[[paste("todaydat", i, sep = "")]]==1, 1,
                                                              ifelse(df[[paste("todaydat", i, sep = "")]]==2 | df[[paste("todaydat", i, sep = "")]]== -7, 0, NA)))
}

#COUNT CORRECT DATE ITEMS
df <- df %>% 
  mutate(date_item4 = ifelse(rnd==4, date_item5, date_item4)) %>% 
  mutate(date_sum = date_item1 + date_item2 + date_item3 + date_item4) %>% 
  
  #PROXY SAYS CAN'T SPEAK TO SP
  mutate(date_sum = ifelse(speaktosp==2 & is.na(date_sum),-2,  
                           #PROXY SAYS CAN SPEAK TO SP BUT SP UNABLE TO ANSWER*
                           ifelse((is.na(date_item1) | is.na(date_item2) | is.na(date_item3) | is.na(date_item4)) & speaktosp==1,-3, date_sum))) %>% 
  
  #MISSING IF PROXY SAYS CAN'T SPEAK TO SP*  
  mutate(date_sumr = ifelse(date_sum == -2 , NA, 
                            #0 IF SP UNABLE TO ANSWER*
                            ifelse(date_sum == -3 , 0, date_sum)))


########PRESIDENT AND VICE PRESIDENT NAME ITEMS AND COUNT########## 
##CODE ONLY YES/NO RESPONSES: MISSING/N.A. CODES -1,-9 LEFT MISSING *
##2:NO/DK OR -7:REFUSED RECODED TO 0:NO/DK/RF*
df <- df %>% 
  mutate(preslast = ifelse(presidna1 == 1, 1,
                           ifelse(presidna1 == 2 | presidna1 == -7, 0, NA))) %>% 
  mutate(presfirst = ifelse(presidna3 == 1, 1,
                            ifelse(presidna3 == 2 | presidna3 == -7, 0, NA))) %>% 
  mutate(vplast = ifelse(vpname1 == 1, 1,
                         ifelse(vpname1 == 2 | vpname1 == -7, 0, NA))) %>% 
  mutate(vpfirst = ifelse(vpname3 == 1, 1,
                          ifelse(vpname3 == 2 | vpname3 == -7, 0, NA))) %>% 
  
  #COUNT CORRECT PRESIDENT/VP NAME ITEMS*
  mutate(presvp = preslast + presfirst + vplast + vpfirst) %>% 
  #PROXY SAYS CAN'T SPEAK TO SP 
  mutate(presvp = ifelse(speaktosp == 2 & is.na(presvp), -2, 
                         #PROXY SAYS CAN SPEAK TO SP BUT SP UNABLE TO ANSWER                           
                         ifelse((is.na(preslast) | is.na(presfirst) | is.na(vplast) | is.na(vpfirst)) & speaktosp==1 & is.na(presvp),-3, presvp))) %>% 
  
  #MISSING IF PROXY SAYS CAN’T SPEAK TO SP*
  mutate(presvpr =  ifelse(presvp == -2 , NA, 
                           ifelse(presvp == -3 , 0, presvp))) %>% 
  
  #ORIENTATION DOMAIN: SUM OF DATE RECALL AND PRESIDENT/VP NAMING* 
  mutate(date_prvp = date_sumr + presvpr)


#######EXECUTIVE FUNCTION DOMAIN: CLOCK DRAWING SCORE##########
#RECODE DCLKDRAW TO ALIGN WITH MISSING VALUES IN PREVIOUS ROUNDS (ROUND 10 ONLY)* 
df <- df %>% 
  mutate(dclkdraw = ifelse(speaktosp == 2 & dclkdraw == -9 & rnd==10, -2,
                           ifelse(speaktosp==1 & (quesremem==2 | quesremem==-7 | quesremem==-8) & dclkdraw==-9 & rnd==10, -3,
                                  ifelse(atdrwclck==2 & dclkdraw==-9 & rnd==10, -4,
                                         ifelse(atdrwclck==97 & dclkdraw==-9 & rnd==10, -7, dclkdraw)))))

#RECODE DCLKDRAW TO ALIGN WITH MISSING VALUES IN PREVIOUS ROUNDS (ROUNDS 11 AND FORWARD ONLY)* 
df<-df  %>%
  mutate(dclkdraw = ifelse(speaktosp == 2 & dclkdraw == -9 & rnd>=11, -2, 
                           ifelse(speaktosp == 1 & (quesremem == 2 | quesremem == -7 | quesremem == -8) & dclkdraw == -9, -3 & rnd>=11, dclkdraw))) 
df<-df  %>%
  mutate(clock_scorer = ifelse(dclkdraw == -3 | dclkdraw == -4 | dclkdraw == -7, 0,
                               #IMPUTE MEAN SCORE TO PERSONS MISSING A CLOCK*
                               #IF PROXY SAID CAN ASK SP*
                               ifelse(dclkdraw == -9 & speaktosp == 1, 2, 
                                      #IF SELF-RESPONDENT*       
                                      ifelse(dclkdraw == -9 & speaktosp == -1, 3, 
                                             ifelse(dclkdraw == -2 | dclkdraw == -9, NA, dclkdraw)))))


#MEMORY DOMAIN: IMMEDIATE AND DELAYED WORD RECALL 
df <- df %>%
  mutate(irecall  =  ifelse(dwrdimmrc == -2 | dwrdimmrc == -1, NA,
                            ifelse(dwrdimmrc == -7 | dwrdimmrc == -3, 0, dwrdimmrc))) %>% 
  mutate(irecall = ifelse(rnd==5 & dwrddlyrc==-9, NA, irecall)) %>%  #round 5 only: set cases with missing word list and not previously assigned to missing
  
  mutate(drecall  =  ifelse(dwrddlyrc == -2 | dwrddlyrc == -1, NA,
                            ifelse(dwrddlyrc == -7 | dwrddlyrc == -3, 0, dwrddlyrc))) %>% 
  mutate(drecall = ifelse(rnd==5 & dwrddlyrc==-9, NA, drecall)) %>%  #round 5 only: set cases with missing word list and not previously assigned to missing
  
  mutate(wordrecall0_20 = irecall+drecall)


#CREATE COGNITIVE DOMAINS FOR ALL ELIGIBLE 

df<-df %>% 
  mutate(clock65 = ifelse(clock_scorer == 0 | clock_scorer==1, 1, 
                          ifelse(clock_scorer > 1 & clock_scorer<6, 0, NA)))

df<-df %>%  
  mutate(word65 = ifelse(wordrecall0_20 >= 0 & wordrecall0_20 <=3, 1, 
                         ifelse(wordrecall0_20 > 3 & wordrecall0_20 <=20, 0, NA)))

df<-df %>%  
  mutate(datena65 = ifelse(date_prvp >= 0 & date_prvp <=3, 1, 
                           ifelse(date_prvp > 3 & date_prvp <= 8, 0, NA)))

#  *CREATE COGNITIVE DOMAIN SCORE*
df<-df %>% 
  mutate(domain65 = clock65+word65+datena65)

#*SET CASES WITH MISSING WORD LIST AND NOT PREVIOUSLY ASSIGNED TO MISSING (ROUND 5 ONLY)
df<-df %>%   
  mutate(demclas = ifelse(rnd==5 & dwrdlstnm==-9 & is.na(demclas), -9, demclas))

#UPDATE COGNITIVE CLASSIFICATION*
df<-df %>% 
  #PROBABLE DEMENTIA
  mutate(demclas = ifelse(is.na(demclas) & (speaktosp == 1 | speaktosp == -1) & (domain65==2 | domain65==3), 1,
                          #POSSIBLE DEMENTIA
                          ifelse(is.na(demclas) & (speaktosp == 1 | speaktosp == -1) & domain65==1, 2,
                                 #NO DEMENITA                    
                                 ifelse(is.na(demclas) & (speaktosp == 1 | speaktosp == -1) & domain65==0, 3, demclas))))

#KEEP VARIABLES AND SAVE DATA
df<-df %>% 
  dplyr::select(spid, rnd, demclas)

#CHANGE # AFTER "r" TO THE ROUND OF INTEREST
r11demclas <- df

#4. NAME AND SAVE DEMENTIA DATA FILE:
#CHANGE # AFTER "r" TO THE ROUND OF INTEREST
save(r11demclas, file = "~/R  HC/BMIN503_Final_Project/final final/NHATS_r11.dta") 

```

```{r}
#merged datasets (md). 
md1 <- left_join(df, df1, by = "spid")
md2 <- left_join(md1, df3, by = "spid")

md3 <- left_join(md2, df4,  by = "spid") # might not use it 

# choose probable dementia and dementia patients who live at home
dementia1 <- md2 |>
  filter(demclas %in% c("1", "2") & (r11dresid  %in% c("1")))
```

***Predictors**: Caregiver level factors are identified as caregivers' age, race, gender, self-reported income, and the highest education level. Also, these are recoded accordingly. The education level of the caregivers was categorized as "Less than high school (0)”, “High School (1)”, and “College or above (2).” For economic status, the caregivers' reported income from the previous year was used. This study included both informal and formal support as part of the caregivers' social determinants of health. Informal support included having friends or family (a) to talk to about important life matters, (b) to help with daily activities, such as running errands, and (c) to assist with care provision.10 Formal support included (a) participation in a support group for caregivers, (b) access to respite services that allowed the caregiver to take time off, and (c) involvement in a training program that assisted the caregiver in providing care for the care recipient.10 We used these individual items as support questions and each support question was answered by indicating whether or not they received support.*

```{r}
# Caregiver's Age (renaming variable) #chd11dage
#Race
# Recode `race` to create a new binary variable
# 1 for "White, non-Hispanic" and 0 for "Non-White"
# Recode race to create a new variable 'race_recode'
dementia1 <- dementia1 |>
  mutate(
    race_recode = case_when(
      crl11dcgracehisp == 1 ~ 1,  # White, non-Hispanic
      crl11dcgracehisp %in% c(2, 3, 4, 5, 6) ~ 0  
    ))  

# Gender: Male as reference (0), Female as 1
dementia1 <- dementia1 |>
  mutate(
    gender = case_when(
      as.character(c11gender) == "1" ~ 0,  # Male
      as.character(c11gender) == "2" ~ 1,  # Female
      TRUE ~ NA_real_  # Handle any other unexpected cases
    )
  )

# Education: Recoding education levels into two categories
dementia1 <- dementia1 |>
  mutate(
    edu_recode = case_when(
      chd11educ %in% 1:3 ~ 1,     # Below and high school diploma (1-3) → 1
      chd11educ %in% 5:8 ~ 2,     # Some college (5-8) → 2
      chd11educ == -8 ~ NA_real_, 
      chd11educ == -7 ~ NA_real_, 
      TRUE ~ NA_real_  # Any other unhandled cases get NA
    )
  )

# Filter out rows where chi11income is in the excluded values
dementia1 <- dementia1[!dementia1$chi11income %in% c(-8, -6, -7, 0), ]

# Marital Status: Recoding marital status into binary (married vs. not married)
dementia1 <- dementia1 |>
  mutate(
    martial_recode = case_when(
      chd11martstat == 1 ~ 1,     # Married
      chd11martstat %in% 2:6 ~ 0, # Not married (single, divorced, etc.)
      chd11martstat == -1 ~ NA_real_, 
      TRUE ~ NA_real_  # Handle any other unhandled cases
    )
  )

```

*Caregiver's social strains - binary questions (Y/N). In the last month, did helping the recipient ever keep you from: 1) visiting in person with friends or family not living with you? 2) participating in club meetings or group activities? 3) going out for enjoyment? 4) working for pay? 5) doing volunteer work? 6) providing care for a child or other adult?*

```{r}
#recoding caregivers' social strain questions 
recode_column <- function(data, column, new_column) {
  if (column %in% colnames(data)) {
    data <- data %>%
      mutate(!!sym(new_column) := case_when(
        !!sym(column) == 1 ~ 1,  # Map 1 to 1
        !!sym(column) == 2 ~ 0,  # Map 2 to 0
        !!sym(column) %in% c(-8, -1) ~ NA_real_,  # Map -8 or -1 to NA
        TRUE ~ NA_real_  # Map all other values to NA
      ))
  } else {
    stop(paste("Column", column, "does not exist in the dataset."))
  }
  return(data)
}

# Apply recoding for multiple columns in dementia1
columns_to_recode <- c("pa11hlkepfvst", "pa11hlkpfrclb", "pa11hlkpgoenj", 
                       "pa11hlkpfrwrk", "pa11hlkpfrvol", "pa11prcranoth")

# Dataset to apply transformations
dementi1_clean <- dementia1

for (col in columns_to_recode) {
  recoded_col_name <- paste0(col, "_recode")
  dementi1_clean <- recode_column(dementia1, col, recoded_col_name)
}

# Calculate total_strains
dementi1_clean <- dementi1_clean %>%
  mutate(strain = rowSums(select(., ends_with("_recode")), na.rm = TRUE))

# Categorize strain into strain with a cutoff of 2
dementi1_clean <- dementi1_clean %>%
  mutate(strain_cat = ifelse(strain < 2, 0, 1)) #0~no, #1 yes
```

***Outcomes**: Caregivers' anxiety and depressive symptoms are measured by two questions each.First, anxiety was measured Generalized Anxiety Disorder-2 (GAD-2) Scale which consists of two questions. Since the NHATS provided GAD-2 data, this study utilized it to measure anxiety levels among care recipients. Each item on the scale is rated on a four-point Likert scale, ranging from 0 (not at all) to 3 (nearly every day), resulting in a total score between 0 and 6. Higher scores correspond to greater anxiety, with a total GAD-2 score of 3 or more indicating anxiety.*

*The care recipients' depression was evaluated using the Patient Health Questionnaire-2 (PHQ-2) Scale. Given that the NHATS included PHQ-2, this study utilized it to measure depression in care recipients. Each item on the scale was measured with a four-point Likert scale, ranging from 0 (not at all) to 3 (nearly every day), resulting a total score between 0 and 6, with higher scores indicating more severe depression. A PHQ-2 score ranges from 0-6. The authors identified a score of 3 as the optimal cutpoint when using the PHQ-2 to screen for depression. If the score is 3 or greater, major depressive disorder is likely.*

```{r}
# Sum the two questions for GAD2
dementi1_clean$total_gad2 <- dementi1_clean$che11fltnervs + dementi1_clean$che11fltworry
# Recode the combined variable using a cut-off of 3
dementi1_clean$gad2_cg_cat <- ifelse(dementi1_clean$total_gad2 < 3, 0, 1)
 table(dementi1_clean$gad2_cg_cat)
 summary(dementi1_clean$gad2_cg_cat) #1 ~ anxiety
# Sum of the two questions for PHQ2 (che11fltltlin + che11fltdown) 
dementi1_clean$total_phq2 <- dementi1_clean$che11fltltlin+ dementi1_clean$che11fltdown
#Recode the combined variable using a cut-off of 3
dementi1_clean$phq2_cg_cat <- ifelse(dementi1_clean$total_phq2 < 3, 0, 1)
 table(dementi1_clean$phq2_cg_cat)
 summary(dementi1_clean$phq2_cg_cat) #1 ~ depression
```

***Data analysis***

*For data analysis, we first conducted descriptive analyses, including means, standard deviations, ranges, and percentages, to summarize the dataset. To investigate how caregivers' social strains and caregiver-level factors influence caregiver depression, we performed logistic regression analyses. Guided by the conceptual framework of this study, univariate logistic regression analyses were employed to identify caregivers' social strains and caregiver-level factors significantly associated with caregiver anxiety and depression, controlling for care recipient-level factors. Variables with a p-value below 0.05 in the univariate analyses were included in the subsequent multivariate logistic regression model. The multivariate model was then constructed to determine which factors most strongly influenced caregiver anxiety and depression. All statistical analyses were conducted using R, with statistical significance set at a p-value of less than 0.05.*

## *Results* {#sec-results}

***4.1 Characteristics of Participants***

*A total of The mean age of the caregivers was 62.6 ±13.5 (20–95) years. The majority of participants were female (65.9%), high school graduates (52.3%), married or living with a partner (57.8%), and employed (64.4%). Approximately 72% of the care recipients were identified as having probable dementia, whereas 28% were classified as having possible dementia. Many relied on their caregivers for basic activities of daily living and instrumental activities of daily living. Approximately 26% to 29% of care recipients exhibited behavioral and psychological symptoms, such as anxiety or depression.*

```{r}
# Summary and Visualization of 'demclas'
table(dementi1_clean$demclas) #1 probable dementia #2 dementia diagnosis

ggplot(dementi1_clean, aes(demclas)) + 
  geom_histogram(
    breaks = seq(0, 2, 1), 
    color = "blue", 
    fill = "blue", 
    alpha = 0.7
  ) +
  labs(
    title = "Distribution of Dementia Classifications",
    x = "Dementia Class",
    y = "Count"
  ) +
  theme_minimal()

# Caregiver's Age
ggplot(dementi1_clean, aes(chd11dage)) + 
  geom_histogram(
    aes(y = after_stat(density)), 
    breaks = seq(0, 80, 1), 
    color = "blue", 
    fill = "blue", 
    alpha = 0.7
  ) +
  geom_density(color = "red") +
  labs(
    title = "Caregiver's Age Distribution",
    x = "Age",
    y = "Density"
  ) +
  theme_minimal()

# Gender Distribution Plot (Excluding NA values)
ggplot(dementi1_clean %>% filter(!is.na(gender)), aes(x = factor(gender))) + 
  geom_bar(
    fill = "steelblue", 
    color = "black", 
    alpha = 0.7
  ) +
  scale_x_discrete(
    name = "Gender",
    labels = c("0" = "Male", "1" = "Female")  # Adjusted labels for gender
  ) +
  labs(
    title = "Gender Distribution of Caregivers", 
    x = "Gender", 
    y = "Count"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  )

# Caregiver's Education Level Plot (Excluding NA values)
dementi1_clean <- dementi1_clean %>%
  filter(!is.na(chd11educ))

ggplot(dementi1_clean, aes(x = factor(chd11educ))) + 
  geom_bar(
    fill = "blue", 
    color = "black", 
    alpha = 0.7
  ) +
  scale_x_discrete(
    name = "Education Level",
    labels = c(
      "-1" = "No School", 
      "2" = "Primary (1-8th)", 
      "3" = "9-12th Grade", 
      "4" = "High School Diploma", 
      "5" = "Trade Certificate", 
      "6" = "Some College (No Degree)", 
      "7" = "Associate", 
      "8" = "Bachelor's Degree"
    )
  ) +
  labs(
    title = "Distribution of Caregiver Education Levels", 
    x = "Education Level", 
    y = "Count"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  )

# Caregiver's Marital Status Plot (Excluding NA values)
ggplot(dementi1_clean %>% 
         filter(!is.na(chd11martstat) & !chd11martstat %in% c(-1, 6)), aes(x = factor(chd11martstat))) + 
  geom_bar(
    fill = "orange", 
    color = "black", 
    alpha = 0.7
  ) +
  scale_x_discrete(
    name = "Marital Status",
    labels = c(
      "1" = "Single", 
      "2" = "Married", 
      "3" = "Widowed", 
      "4" = "Divorced", 
      "5" = "Separated"
    )
  ) +
  labs(
    title = "Caregiver Marital Status",
    x = "Marital Status",
    y = "Count"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "none"
  )
```

*4.2 Logistic Regression*

```{r}
#Create subset data from dementi1_clean
#Anxiety
anxiety <- subset(
  dementi1_clean,
  select = c(pa11hlkepfvst, pa11hlkpfrclb, pa11hlkpgoenj, pa11hlkpfrwrk, pa11hlkpfrvol, pa11prcranoth, strain_cat, race_recode, gender, edu_recode, chd11dage, chi11income, martial_recode, gad2_cg_cat))

#Depression
depression <- subset(
  dementi1_clean,
  select = c(pa11hlkepfvst, pa11hlkpfrclb, pa11hlkpgoenj, pa11hlkpfrwrk, pa11hlkpfrvol, pa11prcranoth, strain_cat, race_recode, gender, edu_recode, chd11dage, chi11income, martial_recode, phq2_cg_cat))
```

```{r}
#Fit the logistic regression model
anx_model <- glm(
  gad2_cg_cat ~ pa11hlkepfvst + pa11hlkpfrclb + pa11hlkpgoenj +
    pa11hlkpfrwrk + pa11hlkpfrvol + pa11prcranoth + strain_cat +
    race_recode + gender + edu_recode + chd11dage + chi11income +
    martial_recode,
  data = dementi1_clean,
  family = binomial(link = "logit")
)
summary(anx_model)

depress_model <- glm(
  phq2_cg_cat ~ pa11hlkepfvst + pa11hlkpfrclb + pa11hlkpgoenj +
    pa11hlkpfrwrk + pa11hlkpfrvol + pa11prcranoth + strain_cat +
    race_recode + gender + edu_recode + chd11dage + chi11income +
    martial_recode,
  data = dementi1_clean,
  family = binomial(link = "logit")
)
summary(depress_model)
```

4.3 Machine Learning Approaches

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(kernlab)
library(randomForest)
library(glmnet)
library(xgboost)
library(vip)
library(tidymodels)
library(yardstick)
library(pROC)
library(lattice)
library(caret)
tidymodels_prefer()
```

```{r}
#depression - imputation
depression2 <- depression %>%
  mutate(phq2_cg_cat = factor(phq2_cg_cat, levels = c(0, 1), labels = c("false", "true"))) %>%
  filter(!is.na(phq2_cg_cat))  #remove na within phq2 score (one of outcome variables)

depression2 <- depression2 |>
  mutate(across(c(martial_recode, chi11income, chd11dage, race_recode, gender, edu_recode), 
                ~replace(., is.na(.), 3)))  # change NA to 3
```

```{r}
#anxiety - preparing dataset
anxiety2 <- anxiety |>
  mutate(gad2_cg_cat = factor(gad2_cg_cat, levels = c(0, 1), labels = c("false", "true"))) %>%
  filter(!is.na(gad2_cg_cat))  #remove na within phq2 score (one of outcome variables)

anxiety2 <- anxiety2 |>
  mutate(across(c(martial_recode, chi11income, chd11dage, race_recode, gender, edu_recode), 
                ~replace(., is.na(.), 3)))  # change NA to 3
```

*4.3.1 Anxiety- machine learning*

```{r}
anxiety_split <- initial_split(anxiety2, 
                            prop = 0.80)
anxiety_split
anxiety_train <- training(anxiety_split)
anxiety_test <- testing(anxiety_split)
#283/71/354

lr_cls_spec <- 
  logistic_reg() |> 
  set_engine("glm")

lr_cls_fit <- 
  lr_cls_spec |>
  fit(gad2_cg_cat ~ ., data = anxiety_train)

#Perform 10-fold cross validation on the training data
anxiety_folds <- vfold_cv(anxiety_train, v = 10)
anxiety_folds

#Create a workflow() for fitting the glm
glm_wf <- workflow() |>
  add_model(lr_cls_spec) |>
  add_formula(gad2_cg_cat ~ .)
  
#Use workflow to fit model with each fold of resampled data
glm_fit_cv <- 
  glm_wf |>
  fit_resamples(
    resamples = anxiety_folds, 
    control = control_resamples(save_pred = TRUE)
  )

#Collect predictions out of folds into one tibble
anxiety_glm_cv_preds <- collect_predictions(glm_fit_cv)

#Plot of ROC curve of CV results
autoplot(roc_curve(anxiety_glm_cv_preds, 
        gad2_cg_cat, 
        .pred_true))

#Overall metrics of CV results
collect_metrics(glm_fit_cv) # mean_roc_auc = 0.5588787					
#Prediction on the test data
anxiety.lr.pred.values.test <-  bind_cols(
  truth = anxiety_test$gad2_cg_cat,
  predict(lr_cls_fit, anxiety_test),
  predict(lr_cls_fit, anxiety_test, type = "prob")
)
anxiety.lr.pred.values.test

#Plot of ROC curve of prediction on test results
autoplot(roc_curve(anxiety.lr.pred.values.test, truth, .pred_true))

#Metrics of prediction on test data
metrics(anxiety.lr.pred.values.test, truth, .pred_class, .pred_true) #ROC_AUC 0.3028846, accuracy 0.6197183			
```

*4.3.2 Depression*

```{r}
depression_split <- initial_split(depression2, 
                            prop = 0.80)
depression_split
depression_train <- training(depression_split)
depression_test <- testing(depression_split)

lr_cls_spec <- 
  logistic_reg() |> 
  set_engine("glm")

lr_cls_fit <- 
  lr_cls_spec |>
  fit(phq2_cg_cat ~ ., data = depression_train)

#Perform 10-fold cross validation on the training data
depression_folds <- vfold_cv(depression_train, v = 10)
depression_folds

#Create a workflow() for fitting the glm
glm_wf <- workflow() |>
  add_model(lr_cls_spec) |>
  add_formula(phq2_cg_cat ~ .)
  
#Use workflow to fit model with each fold of resampled data
glm_fit_cv <- 
  glm_wf |>
  fit_resamples(
    resamples = depression_folds, 
    control = control_resamples(save_pred = TRUE)
  )

#Collect predictions out of folds into one tibble
depression_glm_cv_preds <- collect_predictions(glm_fit_cv)

#Plot of ROC curve of CV results
autoplot(roc_curve(depression_glm_cv_preds, 
        phq2_cg_cat, 
        .pred_true))

#Overall metrics of CV results
collect_metrics(glm_fit_cv) # mean_roc_auc = 0.5306156				
#Prediction on the test data
depression.lr.pred.values.test <-  bind_cols(
  truth = depression_test$phq2_cg_cat,
  predict(lr_cls_fit, depression_test),
  predict(lr_cls_fit, depression_test, type = "prob")
)
depression.lr.pred.values.test

#Plot of ROC curve of prediction on test results
autoplot(roc_curve(depression.lr.pred.values.test, truth, .pred_true))

#Metrics of prediction on test data
metrics(depression.lr.pred.values.test, truth, .pred_class, .pred_true) #ROC_AUC 0.4218501	, accuracy 0.6056338		
```

*4.4. Random forest*

4.4.1 Anxiety

```{r}
rf_spec <- 
  rand_forest(trees = 1000, min_n = 5) |> 
  set_engine("randomForest", importance = TRUE) |>
  set_mode("classification")
rf_spec
# Train a random forest model
rf_model <- randomForest(gad2_cg_cat ~  ., 
                         data=anxiety2, ntree=100)

rf_fit <- rf_spec |>
  fit(gad2_cg_cat ~ ., data = anxiety2)
rf_fit

#
rf_workflow <-
  workflow() |>
  add_model(rf_spec) |>
  add_formula(gad2_cg_cat ~ .)

rf_fit_cv <-
  rf_workflow |>
  fit_resamples(anxiety_folds, 
                control = control_resamples(save_pred = TRUE))

collect_metrics(rf_fit_cv) #roc_auc= 0.516	

rf_fit_cv |>
  collect_predictions() |>
  roc_curve(gad2_cg_cat, .pred_true) |>
  autoplot()


#
#10-fold cross validation on rf
data_anxiety2_folds <- vfold_cv(anxiety2, v = 10)

rf_anxiety_wf <- workflow() |>
  add_model(rf_spec) |>
  add_formula(gad2_cg_cat ~ .)

rf_anxiety_wf_fit <- rf_anxiety_wf |>
  fit(data = anxiety2)

rf_anxiety_wf_fit_cv <-
  rf_anxiety_wf_fit  |>
  fit_resamples(data_anxiety2_folds, 
                control = control_resamples(save_pred = TRUE))
rf_anxiety_wf_fit_cv
collect_metrics(rf_anxiety_wf_fit_cv) #roc_auc= 0.4142855	

rf_anxiety_wf_fit_cv |>
  collect_predictions() |>
  roc_curve(gad2_cg_cat, .pred_true) |>
  autoplot()

rf_anxiety_wf_fit_cv_preds <- collect_predictions(rf_anxiety_wf_fit_cv)
```

4.4.2 Depression

```{r}
#Depression
rf_spec <- 
  rand_forest(trees = 1000, min_n = 5) |> 
  set_engine("randomForest", importance = TRUE) |>
  set_mode("classification")
rf_spec
# Train a random forest model
rf_model <- randomForest(phq2_cg_cat ~  ., 
                         data=depression2, ntree=100)

rf_fit <- rf_spec |>
  fit(phq2_cg_cat ~ ., data = depression2)
rf_fit

depression.rf.pred.values <- bind_cols(
  truth = depression2$phq2_cg_cat,
  predict(rf_fit, depression2),
  predict(rf_fit, depression2, type = "prob")
)

roc_auc(depression.rf.pred.values,
        truth, 
        .pred_false)

autoplot(roc_curve(depression.rf.pred.values, 
                   truth, 
                   .pred_false))

rf_workflow <-
  workflow() |>
  add_model(rf_spec) |>
  add_formula(phq2_cg_cat ~ .)

rf_fit_cv <-
  rf_workflow |>
  fit_resamples(depression_folds, 
                control = control_resamples(save_pred = TRUE))

collect_metrics(rf_fit_cv) #roc_auc= 0.4806070			

rf_fit_cv |>
  collect_predictions() |>
  roc_curve(phq2_cg_cat, .pred_true) |>
  autoplot()

```

```{r}
rf_fit |>
  extract_fit_engine() |>
  importance()

rf_fit |>
  extract_fit_engine() |>
  vip()
```

#cross-validation

```{r}
#10-fold cross validation on rf
data_depression2_folds <- vfold_cv(depression2, v = 10)

rf_depression_wf <- workflow() |>
  add_model(rf_spec) |>
  add_formula(phq2_cg_cat ~ .)

rf_depression_wf_fit <- rf_depression_wf |>
  fit(data = depression2)

rf_depression_wf_fit_cv <-
  rf_depression_wf_fit  |>
  fit_resamples(data_depression2_folds, 
                control = control_resamples(save_pred = TRUE))
rf_depression_wf_fit_cv
collect_metrics(rf_depression_wf_fit_cv) #roc_auc= 0.4142855	

rf_depression_wf_fit_cv |>
  collect_predictions() |>
  roc_curve(phq2_cg_cat, .pred_true) |>
  autoplot()

rf_depression_wf_fit_cv_preds <- collect_predictions(rf_depression_wf_fit_cv)
```

*XGBoost*

```{r}
#depression

bt_spec <- 
  boost_tree(trees = 50,
             tree_depth = 4) |>
  set_mode("classification") |>
  set_engine("xgboost")

# Recipe
bt_recipe <-
  recipe(phq2_cg_cat ~ ., data = depression2) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_predictors())

# Workflow specification
bt_workflow <- workflow() |>
  add_model(bt_spec) |>
  add_recipe(bt_recipe)

# Model fit to the training data
bt_fit <- fit(bt_workflow, data = depression2)

# Predictions (bind truth and predictions)
depression.bt.pred.values <- bind_cols(
  truth = depression2$phq2_cg_cat,
  predict(bt_fit, depression2),
  predict(bt_fit, depression2, type = "prob")
)

# Evaluate model performance (ROC AUC)
roc_auc(depression.bt.pred.values, truth, .pred_true)

# Plot ROC curve
autoplot(roc_curve(depression.bt.pred.values, truth, .pred_true))

# Variable importance using vip
vip(bt_fit)
extract_fit_parsnip(bt_fit)

#anxiety

bt_spec <- 
  boost_tree(trees = 50,
             tree_depth = 4) |>
  set_mode("classification") |>
  set_engine("xgboost")

# Recipe
bt_recipe2 <-
  recipe(gad2_cg_cat ~ ., data = anxiety2) |>
  step_dummy(all_nominal_predictors()) |>
  step_normalize(all_predictors())

# Workflow specification
bt_workflow2 <- workflow() |>
  add_model(bt_spec) |>
  add_recipe(bt_recipe2)

# Model fit to the training data
bt_fit2 <- fit(bt_workflow2, data = anxiety2)

# Predictions (bind truth and predictions)
anxiety.bt.pred.values <- bind_cols(
  truth = anxiety2$gad2_cg_cat,
  predict(bt_fit2, anxiety2),
  predict(bt_fit2, anxiety2, type = "prob")
)

# Evaluate model performance (ROC AUC)
roc_auc(anxiety.bt.pred.values, truth, .pred_true)

# Plot ROC curve
autoplot(roc_curve(anxiety.bt.pred.values, truth, .pred_true))

# Variable importance using vip
vip(bt_fit2)
extract_fit_parsnip(bt_fit2)
```


## *Conclusion*

*This the conclusion. The @sec-results can be invoked here.*
